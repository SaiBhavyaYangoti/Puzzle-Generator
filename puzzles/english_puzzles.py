# -*- coding: utf-8 -*-
"""english_puzzles

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LFarOQdfVGm8NEPnlHEaHEWLnZJfscHy
"""

# english_puzzles.py
import random

# Fill in the blanks puzzles (e.g., G_ R _ E N -> GARDEN)
fill_in_the_blanks = [
    ("G_ R _ E N", "GARDEN"),
    ("T _ A _ N", "TRAIN"),
    ("M _ U _ E", "MOUSE"),
    ("P _ A N _ T", "PLANET"),
    ("T _ _ E R", "TIGER"),
    ("F _ _ E S T", "FOREST"),
    ("F _ I _ N D", "FRIEND"),
    ("B _ A _ K", "BLACK"),
    ("C _ A I _", "CHAIR"),
    ("C _ O _ K", "CLOCK"),
    ("T A _ _ E", "TABLE"),
    ("B _ _ A D", "BREAD"),
    ("S _ H _ _ L", "SCHOOL"),
    ("C _ A _ E", "CRANE"),
    ("F _ O O _", "FLOOR"),
    ("S _ _ N E", "STONE"),
    ("T _ _ E F", "THIEF"),
    ("S M _ _ L", "SMALL"),
    ("C _ _ E R A", "CAMERA"),
    ("J _ _ G L E", "JUNGLE"),
    ("P _ N _ I L", "PENCIL"),
    ("R _ _ V E R", "RIVER"),
    ("B _ N _", "BONE"),
    ("B _ _ T _ E R ", "BROTHER")
    # Add more as needed
]

# Jumbled word puzzles (e.g., GDAENR -> GARDEN)
jumbled_words = [
    ("GDAENR", "GARDEN"),
    ("TAC", "CAT"),
    ("IBRD", "BIRD"),
    ("APPEL", "APPLE"),
    ("KOBO", "BOOK"),
    ("HLOOSC", "SCHOOL"),
    ("ETRWA", "WATER"),
    ("UOSHE", "HOUSE"),
    ("COWNR", "CROWN"),
    ("THREA", "EARTH"),
    ("ALBL", "BALL"),
    ("IMALSN", "ANIMALS"),
    ("LLEB", "BELL"),
    ("SOWN", "SNOW"),
    ("HTILG", "LIGHT"),
    ("MRAEC", "CREAM"),
    ("ESUOM", "MOUSE"),
    ("OHSES", "SHOES"),
    ("KACE", "CAKE"),
    ("IRCAH", "CHAIR"),
    ("DOLG", "GOLD"),
    ("APT", "TAP"),
    ("MRRROI", "MIRROR"),
    ("EHLP", "HELP"),
    ("DOWNIW", "WINDOW"),
    ("GINEENR", "ENGINEER")
    # Add more as needed
]

# Definition-based riddles (e.g., "The king of the jungle (5 letters)" -> LION)
definition_riddles = [
    ("The king of the jungle (4 letters)", "LION"),
    ("A color of the sun (6 letters)", "ORANGE"),
    ("Opposite of cold (3 letters)", "HOT"),
    ("Animal that says 'meow' (3 letters)", "CAT"),
    ("A place full of books (7 letters)", "LIBRARY"),
    ("A tasty frozen dessert (7 letters)", "ICECREAM"),
    ("Water falling from clouds (4 letters)", "RAIN"),
    ("Planet known as the 'Red Planet' (4 letters)", "MARS"),
    ("Fruit that keeps doctors away (5 letters)", "APPLE"),
    ("Insects that make honey (3 letters)", "BEE"),
    ("Baby cat (6 letters)", "KITTEN"),
    ("Instrument with strings (6 letters)", "GUITAR"),
    ("A shape with three sides (8 letters)", "TRIANGLE"),
    ("National bird of India (7 letters)", "PEACOCK"),
    ("Green vegetable often used in salads (8 letters)", "CUCUMBER"),
    ("Animal known for its trunk (8 letters)", "ELEPHANT"),
    ("The color of grass (5 letters)", "GREEN"),
    ("The month with Childrenâ€™s Day (8 letters)", "NOVEMBER"),
    ("It keeps you dry in the rain (8 letters)", "UMBRELLA"),
    ("Bird that cannot fly and lives in Antarctica (7 letters)", "PENGUIN"),
    ("The hottest season (6 letters)", "SUMMER"),
    ("A machine to call people (5 letters)", "PHONE"),
    ("Big body of salt water (5 letters)", "OCEAN"),
    ("You need this to open a door (3 letters)", "KEY"),
    ("A toy you fly in the sky (4 letters)", "KITE"),
    ("The fastest land animal (7 letters)", "CHEETAH"),
    ("The opposite of open (5 letters)", "CLOSE")
    # Add more as needed
]

# Odd-one-out puzzles
odd_one_out = [
    (["Apple", "Carrot", "Banana", "Mango"], "Carrot"),
    (["Lion", "Rose", "Tiger", "Elephant"], "Rose"),
    (["River", "Tiger", "Lake", "Ocean"], "Tiger"),
    (["Dog", "Cat", "Cup", "Cow"], "Cup"),
    (["Banana", "Train", "Bus", "Airplane"], "Banana"),
    (["Rose", "Eagle", "Lily", "Jasmine"], "Eagle"),
    (["Shirt", "Pants", "Coat", "Apple"], "Apple"),
    (["Book", "Table", "Pen", "Dog"], "Dog"),
    (["Rabbit", "Mango", "Grapes", "Orange"], "Rabbit"),
    (["Car", "Sun", "Moon", "Star"], "Car"),
    (["Bed", "Chair", "Elephant", "Sofa"], "Elephant"),
    (["Tennis", "Water", "Cricket", "Hockey"], "Water"),
    (["Gold", "Plastic", "Silver", "Copper"], "Plastic"),
    (["Table", "Chair", "Eagle", "Fan"], "Eagle"),
    (["India", "Africa", "Australia", "Shirt"], "Shirt"),
    (["Ice", "Snow", "Sand", "Rain"], "Sand"),
    (["Potato", "Eagle", "Tomato", "Carrot"], "Eagle"),
    (["Guitar", "Piano", "Shirt", "Drum"], "Shirt"),
    (["Pen", "Notebook", "Pencil", "Lion"], "Lion"),
    (["Table", "Mango", "Apple", "Banana"], "Table"),
    (["Airplane", "Helicopter", "Shirt", "Ship"], "Shirt"),
    (["Milk", "Water", "Book", "Oil"], "Book"),
    (["Dog", "Monkey", "Apple", "Cat"], "Apple"),
    (["Sand", "Desert", "School", "Ocean"], "School"),
    (["Mobile", "Laptop", "Cow", "Television"], "Cow"),
    (["Notebook", "Pen", "Pencil", "Cow"], "Cow"),
    (["Hammer", "Scissors", "Shirt", "Screwdriver"], "Shirt"),
    (["Waterfall", "River", "Lake", "Table"], "Table"),
    (["Potato", "Train", "Bus", "Airplane"], "Potato"),
    (["Spider", "Ant", "Butterfly", "Mango"], "Mango")
    # Add more as needed
]

# Analogy puzzles
analogy_puzzles = [
    ("SHIP : SEA :: CAR : ?", "ROAD"),
    ("FISH : WATER :: BIRD : ?", "AIR"),
    ("PEN : WRITE :: KNIFE : ?", "CUT"),
    ("DOCTOR : HOSPITAL :: TEACHER : ?", "SCHOOL"),
    ("FLOWER : GARDEN :: TREE : ?", "FOREST"),
    ("NOSE : SMELL :: TONGUE : ?", "TASTE"),
    ("EYE : SEE :: EAR : ?", "HEAR"),
    ("KING : CROWN :: STUDENT : ?", "BOOK"),
    ("RAIN : UMBRELLA :: SUN : ?", "SUNGLASSES"),
    ("BEE : HONEY :: COW : ?", "MILK"),
    ("SOLDIER : ARMY :: SAILOR : ?", "NAVY"),
    ("FIRE : HOT :: ICE : ?", "COLD"),
    ("MILK : COW :: EGG : ?", "HEN"),
    ("CARPENTER : WOOD :: BLACKSMITH : ?", "IRON"),
    ("DUCK : SWIM :: BIRD : ?", "FLY"),
    ("TABLE : WOOD :: SHIRT : ?", "CLOTH"),
    ("CLOCK : TIME :: THERMOMETER : ?", "TEMPERATURE"),
    ("ROOT : TREE :: FOOT : ?", "BODY"),
    ("EARTH : PLANET :: MOON : ?", "SATELLITE"),
    ("SOUP : BOWL :: COFFEE : ?", "CUP"),
    ("KNIFE : CUT :: BROOM : ?", "SWEEP"),
    ("HAND : FINGER :: FOOT : ?", "TOE"),
    ("RABBIT : BURROW :: BEE : ?", "HIVE"),
    ("BOOK : READING :: FORK : ?", "EATING"),
    ("CAR : WHEELS :: PLANE : ?", "WINGS"),
    ("NEEDLE : SEW :: PEN : ?", "WRITE"),
    ("DAY : BRIGHT :: NIGHT : ?", "DARK"),
    ("HOUSE : ROOF :: BOOK : ?", "COVER")
]

# Puzzle generation functions
def generate_fill_in_the_blank():
    puzzle = random.choice(fill_in_the_blanks)
    return f"Fill in the blanks: {puzzle[0]}", puzzle[1]

def generate_jumbled_word():
    puzzle = random.choice(jumbled_words)
    return f"Unscramble the word: {puzzle[0]}", puzzle[1]

def generate_definition_riddle():
    puzzle = random.choice(definition_riddles)
    return puzzle[0], puzzle[1]

def generate_odd_one_out():
    puzzle = random.choice(odd_one_out)
    options = ", ".join(puzzle[0])
    return f"Find the odd one out: {options}", puzzle[1]

def generate_analogy_puzzle():
    puzzle = random.choice(analogy_puzzles)
    return f"Complete the analogy: {puzzle[0]}", puzzle[1]

def get_english_puzzles(puzzle_type):
    if puzzle_type == "fill_in_the_blanks":
        return [{"question": f"Fill in the blanks: {q}", "answer": a, "explanation": ""} for q, a in fill_in_the_blanks]

    elif puzzle_type == "jumbled_words":
        return [{"question": f"Unscramble the word: {q}", "answer": a, "explanation": ""} for q, a in jumbled_words]

    elif puzzle_type == "riddles":
        return [{"question": q, "answer": a, "explanation": ""} for q, a in definition_riddles]

    elif puzzle_type == "odd_one_out":
        return [{"question": f"Find the odd one out: {', '.join(options)}", "answer": answer, "explanation": ""} for options, answer in odd_one_out]

    elif puzzle_type == "analogy":
        return [{"question": f"Complete the analogy: {q}", "answer": a, "explanation": ""} for q, a in analogy_puzzles]

    else:
        return []
